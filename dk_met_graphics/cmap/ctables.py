# _*_ coding: utf-8 _*_

"""
Define customer color maps.
"""

import matplotlib as mpl


def cm_precipitation_metpy():
    """
    https://unidata.github.io/python-gallery/examples/Precipitation_Map.html
    :return:
    """
    colors = [
        (1.0, 1.0, 1.0),
        (0.3137255012989044, 0.8156862854957581, 0.8156862854957581),
        (0.0, 1.0, 1.0), (0.0, 0.8784313797950745, 0.501960813999176),
        (0.0, 0.7529411911964417, 0.0),
        (0.501960813999176, 0.8784313797950745, 0.0), (1.0, 1.0, 0.0),
        (1.0, 0.6274510025978088, 0.0),
        (1.0, 0.0, 0.0), (1.0, 0.125490203499794, 0.501960813999176),
        (0.9411764740943909, 0.250980406999588, 1.0),
        (0.501960813999176, 0.125490203499794, 1.0),
        (0.250980406999588, 0.250980406999588, 1.0),
        (0.125490203499794, 0.125490203499794, 0.501960813999176),
        (0.125490203499794, 0.125490203499794, 0.125490203499794),
        (0.501960813999176, 0.501960813999176, 0.501960813999176),
        (0.8784313797950745, 0.8784313797950745, 0.8784313797950745),
        (0.9333333373069763, 0.8313725590705872, 0.7372549176216125),
        (0.8549019694328308, 0.6509804129600525, 0.47058823704719543),
        (0.6274510025978088, 0.42352941632270813, 0.23529411852359772),
        (0.4000000059604645, 0.20000000298023224, 0.0)]
    return mpl.colors.ListedColormap(colors, 'precipitation')


def cm_precipitation_nws(clevs=None):
    """
    http://jjhelmus.github.io/blog/2013/09/17/plotting-nsw-precipitation-data/

    :param clevs: levels, must be increasing order array with 15 length.
    :return: colormap function, normalization boundary.
    """
    if clevs is None:
        clevs = [0.1, 2.5, 5, 10, 15, 20, 25,
                 30, 40, 50, 75, 100, 150, 200, 250]
    colors = ["#04e9e7", "#019ff4", "#0300f4", "#02fd02",
              "#01c501", "#008e00", "#fdf802", "#e5bc00", "#fd9500",
              "#fd0000", "#d40000", "#bc0000", "#f800fd", "#dd1c77", "#9854c6"]
    cmap, norm = mpl.colors.from_levels_and_colors(clevs, colors, extend='max')
    return cmap, norm
